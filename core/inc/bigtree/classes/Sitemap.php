<?php
	/*
		Class: BigTree\Sitemap
			Provides an interface for handling the BigTree sitemap.
	*/
	
	namespace BigTree;
	
	use XMLWriter;
	
	class Sitemap extends SQLObject
	{
		protected static $Encoding = "UTF-8";
		protected static $FilePath = "cache/sitemap.xml";
		protected static $GeneratedBy = "Generated by BigTree CMS https://www.bigtreecms.org.";
		protected static $XMLNamespace = "http://www.sitemaps.org/schemas/sitemap/0.9";
		protected static $XMLVersion = "1.0";
		
		/*
			Function: drawXML
				Returns a cached version of the sitemap and regenerates it if it is stale.
		*/
		
		public static function drawXML(): void {
			$file = SERVER_ROOT.static::$FilePath;
			
			if (!file_exists($file) || filemtime($file) < time() - 24 * 60 * 60) {
				static::cache();
			}
			
			readfile($file);
		}
		
		/*
			Function: cache
				Generates the cached XML sitemap
		*/
		
		public static function cache(): void
		{
			// Begin writing the opening XML
			$writer = new XMLWriter;
			$writer->openMemory();
			$writer->setIndent(TRUE);
			$writer->startDocument(static::$XMLVersion, static::$Encoding);
			$writer->writeComment(static::$GeneratedBy);
			$writer->startElement('urlset');
			$writer->writeAttribute('xmlns', static::$XMLNamespace);
			
			// Get all pages
			$pages = SQL::fetchAll("SELECT id, template, external, path FROM bigtree_pages 
									WHERE archived = ''
									  AND seo_invisible = ''
									  AND (publish_at >= NOW() OR publish_at IS NULL)
									ORDER BY id ASC");
			
			foreach ($pages as $page) {
				if ($page["template"] || strpos($page["external"], DOMAIN)) {
					if (!$page["template"]) {
						$link = Link::iplDecode($page["external"]);
					} else {
						$link = Link::byPath($page["path"]);
					}
					
					$writer->startElement('url');
					$writer->writeElement('loc', $link);
					$writer->endElement();

					// Added routed template support
					$template = DB::get("templates", $page["template"]);
	
					if ($template["module"]) {
						$module = DB::get("modules", $template["module"]);
	
						if ($module && $module["class"]) {
							$module_class = new $module["class"];
	
							if (method_exists($module_class, "getSitemap")) {
								$subnav = $module_class->getSitemap($page);
	
								foreach ($subnav as $subnav_item) {
									$writer->startElement('url');
									$writer->writeElement('loc', $subnav_item["link"]);
									$writer->endElement();
								}
							}
							
							unset($module_class, $subnav);
						}
					}
				}
			}
			
			$writer->endElement();
			$writer->endDocument();
			
			file_put_contents(SERVER_ROOT.static::$FilePath, $writer->outputMemory());
		}
		
		/*
			Function: pingSearchEngines
				Sends the latest sitemap.xml out to search engine ping services if enabled in settings.
		*/
		
		public static function pingSearchEngines(): void
		{
			$setting = Setting::value("ping-search-engines");
			
			if ($setting == "on") {
				// Google
				cURL::request("https://www.google.com/webmasters/tools/ping?sitemap=".urlencode(WWW_ROOT."sitemap.xml"));
				// Bing
				cURL::request("https://www.bing.com/webmaster/ping.aspx?siteMap=".urlencode(WWW_ROOT."sitemap.xml"));
			}
		}
		
	}
